library(datasets)
data(iris)
set.seed(1)
rpois(5, 2)
apply(iris[, 1:4], 2, mean)
?apply
iris[,1:4]
mean(iris[,1:4])
mean(numeric(iris[,1:4]))
?numeric
mean(numeric(iris[,1:4]),6)
mean(as.numeric(iris[,1:4]),6)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], TRUE, mean)
apply(iris[, 1:4], T, mean)
apply(iris[, 1:4], 5, mean)
apply(iris[, 1:4], 0, mean)
apply(iris[, 1:4], 2, mean)
iris[Species=="virginia",1:4]
iris[1,1:4]
iris[1:2,1:4]
iris[,1:4]
iris[,]
iris[,c("virginica")]
iris[,c(Species=="virginica")]
subset(iris[,1:4])
subset(iris[,1:4],"Species")
subset(iris[,1:4],Species=="virginica")
subset(iris[,1:4],"Species"=="virginica")
subset(iris[,1:5],"Species"=="virginica")
subset(iris[,1:5],"Species"="virginica")
subset(iris[,1:5],"Species"=="virginica")
subset(iris[,1:5],"Species"=="virginica")
?apply
apply(iris[, 1:4], 2, mean)
?mean
mean(iris[1:4])
as.mean(iris[1:4])
colMeans(iris[1:4])
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
pply(mtcars, 2, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
debug(ls)
ls
ls
debug(ls)
ls
debug(ls)
?debug
ls
undebug(ls)
ls
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
apply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
makeCacheMatrix <- function( m = matrix() ) {
## Initialize the inverse property
i <- NULL
## Method to set the matrix
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
## Method the get the matrix
get <- function() {
## Return the matrix
m
}
## Method to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Method to get the inverse of the matrix
getInverse <- function() {
## Return the inverse property
i
}
## Return a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makecacheMatrix
makeCacheMatrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
